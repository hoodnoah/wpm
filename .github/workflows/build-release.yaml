name: Build and Publish Release

on:
  release:
    types:
      - created
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.8"

      - name: Build windows amd64 binary
        run: |
          GOOS=windows GOARCH=amd64 go build -o release/wpm-windows-amd64.exe

      - name: Build Linux amd64 binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o release/wpm-linux-amd64

      - name: Build Mac ARM binary
        run: |
          GOOS=darwin GOARCH=arm64 go build -o release/wpm-mac-arm

      - name: Build Mac Intel binary
        run: |
          GOOS=darwin GOARCH=amd64 go build -o release/wpm-mac-intel

      # Upload build artifacts for other jobs to access
      - name: Upload *Unsigned* Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: unsigned-binaries
          path: release/

  sign-mac:
    name: Sign Mac Binaries
    needs: build-binaries
    env:
      MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
      MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
      MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
      MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
      MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}

    runs-on: macos-latest
    steps:
      - name: Download macOS Binaries from artifact storage
        uses: actions/download-artifact@v3
        with:
          name: unsigned-binaries
          path: unsigned

      - name: Decode base64 cert back to .p12
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

      - name: Create keychain for headless environment
        run: |
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:.apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

      - name: Codesign the Intel executable
        run: |
          codesign --force --deep --options runtime \
          -- sign "$MACOS_CERTIFICATE_NAME" \
          unsigned/wpm-mac-intel

      - name: Codesign the ARM executable
        run: |
          codesign --force --deep --options runtime \
          -- sign "$MACOS_CERTIFICATE_NAME" \
          unsigned/wpm-mac-arm

      - name: Setup keychain for notarization
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

      - name: Notarize the Intel executable
        run: |
          xcrun notarytool submit unsigned/wpm-mac-intel \ 
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD" \
            --wait

          xcrun stapler staple unsigned/wpm-mac-intel

      - name: Notarize the ARM executable
        run: |
          xcrun notarytool submit unsigned/wpm-mac-arm \ 
            --apple-id "$MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$MACOS_NOTARIZATION_TEAM_ID" \
            --password "$MACOS_NOTARIZATION_PWD" \
            --wait

          xcrun stapler staple unsigned/wpm-mac-arm

      - name: Upload signed macOS files
        uses: actions/upload-artifact@v3
        with:
          name: signed-mac
          path: unsigned/wpm-mac-*

  publish:
    name: Publish Binaries (only on a real release)
    if: ${{ github.event_name == 'release '}}
    runs-on: ubuntu-latest
    needs: [build-binaries, sign-mac]
    steps:
      - name: Download signed Mac
        uses: actions/download-artifact@v3
        with:
          name: signed-mac
          path: release/signed

      - name: Download unsigned binaries
        uses: actions/download-artifact@v3
        with:
          name: unsigned-binaries
          path: release/unsigned

      - name: Upload binaries to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=${{ github.event.release.id }}

          # Upload the unsigned Windows binary
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @release/unsigned/wpm-windows-amd64.exe \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=wpm-windows-amd64.exe"

          # Upload the unsigned Linux binary
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @release/unsigned/wpm-linux-amd64 \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=wpm-linux-amd64"

          # Upload the signed, notarized Mac ARM binary
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @release/signed/wpm-mac-arm \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=wpm-mac-arm"

          # Upload the signed, notarized Mac Intel binary
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/octet-stream" \
               --data-binary @release/signed/wpm-mac-intel \
               "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=wpm-mac-intel"
